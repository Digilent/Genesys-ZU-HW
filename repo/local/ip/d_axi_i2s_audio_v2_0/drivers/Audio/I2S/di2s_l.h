/*
 * di2s_l.h
 *
 *  Created on: Aug 28, 2015
 *      Author: rohegbec
 */

#ifndef DI2S_L_H_
#define DI2S_L_H_

/***************************** Include Files *********************************/

#include "xparameters.h"
#include "xil_types.h"
#include "xil_assert.h"
#include "xil_io.h"

/************************** Constant Definitions *****************************/



/* Definitions of the the configuration option
 * which will be passed along. This part is normally
 * Automatically generated by HSM but being a custom
 * driver the user has to edit it manually
 */

#define DI2S_BASSEADDR		XPAR_DIGILENT_AXI_I2S_0_AXI_L_BASEADDR /* Device base address */
#define DI2S_STREAM_ENABLE	0 /* Is the Streaming port active in the h/w*/
#define DI2S_MASTER			1 /* Is it set the I2S core master */
//#define DI2S_DMA_CAPABLE

/** @name Registers
 *
 * Register offsets for this device.
 * @{
 */

#define DI2S_RESET_OFFSET		0x00 /**< global reset register */
#define DI2S_TRANSFER_OFFSET	0x04 /**< starting of the i2s register */
#define DI2S_FIFO_CTL_OFFSET	0x08 /**< FIFO control set */
#define DI2S_DATA_IN_OFFSET		0x0C /**< playback sample register */
#define DI2S_DATA_OUT_OFFSET	0x10 /**< captured sample register */
#define DI2S_STATUS_OFFSET		0x14 /**< FIFO status register */
#define DI2S_CLOCK_CTL_OFFSET	0x18 /**< clock control register */
#define DI2S_WORD_CNT_OFFSET	0x1C /**< DMA word transfer register */
#define DI2S_STREAM_CTL_OFFSET	0x20 /**< stream enable register */

/* @} */

/** @name Transfer control bits
 *
 * Bits in the Transfer control register
 * @{
 */

#define DI2S_TX_RS				0 /**< transmission start bit */
#define DI2S_RX_RS				1 /**< reception start bit */

/* @} */

/** @name FIFO control bits
 *
 * Bits in the FIFO control register
 * @{
 */

#define DI2S_TX_FIFO_WR_EN		0 /**< transmission FIFO write enable bit*/
#define DI2S_RX_FIFO_RD_EN		1 /**< reception FIFO read enable bit */
#define DI2S_TX_FIFO_RST		30 /**< transmission FIFO reset bit */
#define DI2S_RX_FIFO_RST		11 /**< reception FIFO reset bit */

/* @} */

/** @name FIFO status bits
 *
 * Bits in the FIFO status register
 * @{
 */

#define DI2S_TX_FIFO_EMPTY		0 /**< transmission FIFO empty flag*/
#define DI2S_TX_FIFO_FULL		1 /**< transmission FIFO full flag */
#define DI2S_RX_FIFO_EMPTY		16 /**< reception FIFO empty flag */
#define DI2S_RX_FIFO_FULL		17 /**< reception FIFO full flag */

/* @} */

/** @name Clock control bits
 *
 * Bits in the Clock control register
 * @{
 */

#define DI2S_SAMPLING_RATE_BIT0	0 /**< Sampling rate configuration bit*/
#define DI2S_SAMPLING_RATE_BIT1	1 /**< Sampling rate configuration bit */
#define DI2S_SAMPLING_RATE_BIT2	2 /**< Sampling rate configuration bit */
#define DI2S_SAMPLING_RATE_BIT3	3 /**< Sampling rate configuration bit */
#define DI2S_SLAVE_MODE_ENABLE	16 /**< slave mode enable bit */

/* @} */

/** @name Stream enable bits
 *
 * Bits in the Stream enable register
 * @{
 */

#define DI2S_TX_STREAM_ENABLE	0 /**< transmission stream enable*/
#define DI2S_RX_STREAM_ENABLE	1 /**< reception stream enable */

/* @} */


/**************************** Type Definitions *******************************/

//Bit field construction
struct bits {
	u32 u32bit0:1;
	u32 u32bit1:1;
	u32 u32bit2:1;
	u32 u32bit3:1;
	u32 u32bit4:1;
	u32 u32bit5:1;
	u32 u32bit6:1;
	u32 u32bit7:1;
	u32 u32bit8:1;
	u32 u32bit9:1;
	u32 u32bit10:1;
	u32 u32bit11:1;
	u32 u32bit12:1;
	u32 u32bit13:1;
	u32 u32bit14:1;
	u32 u32bit15:1;
	u32 u32bit16:1;
	u32 u32bit17:1;
	u32 u32bit18:1;
	u32 u32bit19:1;
	u32 u32bit20:1;
	u32 u32bit21:1;
	u32 u32bit22:1;
	u32 u32bit23:1;
	u32 u32bit24:1;
	u32 u32bit25:1;
	u32 u32bit26:1;
	u32 u32bit27:1;
	u32 u32bit28:1;
	u32 u32bit29:1;
	u32 u32bit30:1;
	u32 u32bit31:1;
};

union ubitField{
	u8 rgu8[4];
	u32 l;
	struct bits bit;
}DI2s_BitField;


/***************** Macros (Inline Functions) Definitions *********************/

 /*
 * Define the appropriate I/O access method to memory mapped I/O or DCR.
 */

#define DI2s_In32	Xil_In32
#define DI2s_Out32	Xil_Out32

/****************************************************************************/
/**
*
* Write a value to a I2S register. A 32 bit write is performed. If the
* I2S core is implemented in a smaller width, only the least significant data
* is written.
*
* @param	BaseAddress is the base address of the I2S device.
* @param	RegOffset is the register offset from the base to write to.
* @param	Data is the data written to the register.
*
* @return	None.
*
* @note 	None.
*
****************************************************************************/

#define DI2s_WriteReg(BaseAddress, RegOffset, Data) \
	DI2s_Out32((BaseAddress) + (RegOffset), (u32)(Data))

/****************************************************************************/
/**
*
* Read a value from a I2S register. A 32 bit read is performed. If the
* I2S core is implemented in a smaller width, only the least
* significant data is read from the register. The most significant data
* will be read as 0.
*
* @param	BaseAddress is the base address of the I2S device.
* @param	RegOffset is the register offset from the base to read from.
*
* @return	Data read from the register.
*
* @note		None.
*
****************************************************************************/
#define DI2s_ReadReg(BaseAddress, RegOffset) \
	DI2s_In32((BaseAddress) + (RegOffset))

#endif /* DI2S_L_H_ */
